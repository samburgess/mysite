{"version":3,"sources":["lambda.jpg","7Tn.gif","clipboard.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","className","href","src","lambda","gif","alt","text","onCopy","console","log","clipboard","height","width","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kFAAAA,EAAOC,QAAU,IAA0B,oC,kBCA3CD,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,4NCgC5BC,MAzBf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,wBAAIA,UAAU,WAAd,kBACA,yBAAKA,UAAU,gBACb,uBAAGC,KAAK,4CAA4CD,UAAU,aAA9D,YACA,yBAAKA,UAAU,aAAaE,IAAKC,MACjC,uBAAGF,KAAK,yCAA0CD,UAAU,aAA5D,YACA,yBAAKA,UAAU,aAAaE,IAAKC,MACjC,uBAAGF,KAAK,oCAAqCD,UAAU,aAAvD,WAEF,yBAAKE,IAAKE,IAAKJ,UAAU,WAAWK,IAAI,SACxC,yBAAKL,UAAU,gBAAf,yBAEE,kBAAC,kBAAD,CAAiBM,KAAK,yBAAyBC,OAAQ,kBAAIC,QAAQC,IAAI,oBACrE,4BAAQT,UAAU,aAAY,yBAAKE,IAAKQ,IAAWC,OAAO,OAAOC,MAAM,WAH3E,wBCRYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMC,c","file":"static/js/main.b6e32708.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/lambda.60900645.jpg\";","module.exports = __webpack_public_path__ + \"static/media/7Tn.512d74bd.gif\";","module.exports = __webpack_public_path__ + \"static/media/clipboard.3fc4d835.jpg\";","import React from 'react';\nimport gif from './7Tn.gif';\nimport lambda from './lambda.jpg';\nimport clipboard from './clipboard.jpg';\nimport './App.css';\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1 className=\"dothing\">Samuel Burgess</h1>\n        <div className=\"App-extlinks\">\n          <a href=\"https://www.samburgess.github.io/projects\" className=\"App-links\">projects</a>\n          <img className=\"App-lambda\" src={lambda}/>\n          <a href=\"https://www.samburgess.github.io/about\"  className=\"App-links\">about me</a>\n          <img className=\"App-lambda\" src={lambda}/>\n          <a href=\"https://www.github.com/samburgess\"  className=\"App-links\">github</a>\n        </div>\n        <img src={gif} className=\"App-logo\" alt=\"logo\" />\n        <div className=\"App-contacts\">\n          saburgess239@gmail.com\n          <CopyToClipboard text=\"saburgess239@gmail.com\" onCopy={()=>console.log(\"copied email\\n\")}>\n            <button className=\"App-clear\"><img src={clipboard} height=\"30px\" width=\"25px\"/></button>\n          </CopyToClipboard>\n          +1 (425) 829-5203\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}